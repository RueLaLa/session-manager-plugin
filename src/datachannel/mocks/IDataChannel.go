// Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.

// Code generated by mockery 2.7.4. DO NOT EDIT.
package mocks

import (
	list "container/list"

	communicator "github.com/aws/session-manager-plugin/src/communicator"
	datachannel "github.com/aws/session-manager-plugin/src/datachannel"
	message "github.com/aws/session-manager-plugin/src/message"
	mock "github.com/stretchr/testify/mock"
)

// IDataChannel is an autogenerated mock type for the IDataChannel type
type IDataChannel struct {
	mock.Mock
}

// AddDataToIncomingMessageBuffer provides a mock function with given fields: streamMessage
func (_m *IDataChannel) AddDataToIncomingMessageBuffer(streamMessage datachannel.StreamingMessage) {
	_m.Called(streamMessage)
}

// AddDataToOutgoingMessageBuffer provides a mock function with given fields: streamMessage
func (_m *IDataChannel) AddDataToOutgoingMessageBuffer(streamMessage datachannel.StreamingMessage) {
	_m.Called(streamMessage)
}

// CalculateRetransmissionTimeout provides a mock function with given fields: _a0, streamingMessage
func (_m *IDataChannel) CalculateRetransmissionTimeout(streamingMessage datachannel.StreamingMessage) {
	_m.Called(streamingMessage)
}

// Close provides a mock function with given fields: _a0
func (_m *IDataChannel) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeregisterOutputStreamHandler provides a mock function with given fields: handler
func (_m *IDataChannel) DeregisterOutputStreamHandler(handler datachannel.OutputStreamDataMessageHandler) {
	_m.Called(handler)
}

// FinalizeDataChannelHandshake provides a mock function with given fields: _a0, tokenValue
func (_m *IDataChannel) FinalizeDataChannelHandshake(tokenValue string) error {
	ret := _m.Called(tokenValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tokenValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAgentVersion provides a mock function with given fields:
func (_m *IDataChannel) GetAgentVersion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSessionProperties provides a mock function with given fields:
func (_m *IDataChannel) GetSessionProperties() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// GetSessionType provides a mock function with given fields:
func (_m *IDataChannel) GetSessionType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetStreamDataSequenceNumber provides a mock function with given fields:
func (_m *IDataChannel) GetStreamDataSequenceNumber() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// GetWsChannel provides a mock function with given fields:
func (_m *IDataChannel) GetWsChannel() communicator.IWebSocketChannel {
	ret := _m.Called()

	var r0 communicator.IWebSocketChannel
	if rf, ok := ret.Get(0).(func() communicator.IWebSocketChannel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(communicator.IWebSocketChannel)
		}
	}

	return r0
}

// Initialize provides a mock function with given fields: _a0, clientId, sessionId, targetId, isAwsCliUpgradeNeeded
func (_m *IDataChannel) Initialize(clientId string, sessionId string, targetId string, isAwsCliUpgradeNeeded bool) {
	_m.Called(clientId, sessionId, targetId, isAwsCliUpgradeNeeded)
}

// IsSessionTypeSet provides a mock function with given fields:
func (_m *IDataChannel) IsSessionTypeSet() chan bool {
	ret := _m.Called()

	var r0 chan bool
	if rf, ok := ret.Get(0).(func() chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	return r0
}

// IsStreamMessageResendTimeout checks if resending a streaming message reaches timeout
func (_m *IDataChannel) IsStreamMessageResendTimeout() chan bool {
	ret := _m.Called()

	var r0 chan bool
	if rf, ok := ret.Get(0).(func() chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan bool)
		}
	}

	return r0
}

// Open provides a mock function with given fields: _a0
func (_m *IDataChannel) Open() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OutputMessageHandler provides a mock function with given fields: _a0, stopHandler, sessionID, rawMessage
func (_m *IDataChannel) OutputMessageHandler(stopHandler datachannel.Stop, sessionID string, rawMessage []byte) error {
	ret := _m.Called(stopHandler, sessionID, rawMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(datachannel.Stop, string, []byte) error); ok {
		r0 = rf(stopHandler, sessionID, rawMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessAcknowledgedMessage provides a mock function with given fields: _a0, acknowledgeMessageContent
func (_m *IDataChannel) ProcessAcknowledgedMessage(acknowledgeMessageContent message.AcknowledgeContent) error {
	ret := _m.Called(acknowledgeMessageContent)

	var r0 error
	if rf, ok := ret.Get(0).(func(message.AcknowledgeContent) error); ok {
		r0 = rf(acknowledgeMessageContent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reconnect provides a mock function with given fields: _a0
func (_m *IDataChannel) Reconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterOutputStreamHandler provides a mock function with given fields: handler, isSessionSpecificHandler
func (_m *IDataChannel) RegisterOutputStreamHandler(handler datachannel.OutputStreamDataMessageHandler, isSessionSpecificHandler bool) {
	_m.Called(handler, isSessionSpecificHandler)
}

// RemoveDataFromIncomingMessageBuffer provides a mock function with given fields: sequenceNumber
func (_m *IDataChannel) RemoveDataFromIncomingMessageBuffer(sequenceNumber int64) {
	_m.Called(sequenceNumber)
}

// RemoveDataFromOutgoingMessageBuffer provides a mock function with given fields: streamMessageElement
func (_m *IDataChannel) RemoveDataFromOutgoingMessageBuffer(streamMessageElement *list.Element) {
	_m.Called(streamMessageElement)
}

// ResendStreamDataMessageScheduler provides a mock function with given fields: _a0
func (_m *IDataChannel) ResendStreamDataMessageScheduler() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendAcknowledgeMessage provides a mock function with given fields: _a0, clientMessage
func (_m *IDataChannel) SendAcknowledgeMessage(clientMessage message.ClientMessage) error {
	ret := _m.Called(clientMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(message.ClientMessage) error); ok {
		r0 = rf(clientMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendFlag provides a mock function with given fields: _a0, flagType
func (_m *IDataChannel) SendFlag(flagType message.PayloadTypeFlag) error {
	ret := _m.Called(flagType)

	var r0 error
	if rf, ok := ret.Get(0).(func(message.PayloadTypeFlag) error); ok {
		r0 = rf(flagType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendInputDataMessage provides a mock function with given fields: _a0, payloadType, inputData
func (_m *IDataChannel) SendInputDataMessage(payloadType message.PayloadType, inputData []byte) error {
	ret := _m.Called(payloadType, inputData)

	var r0 error
	if rf, ok := ret.Get(0).(func(message.PayloadType, []byte) error); ok {
		r0 = rf(payloadType, inputData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessage provides a mock function with given fields: _a0, input, inputType
func (_m *IDataChannel) SendMessage(input []byte, inputType int) error {
	ret := _m.Called(input, inputType)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, int) error); ok {
		r0 = rf(input, inputType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetAgentVersion provides a mock function with given fields: agentVersion
func (_m *IDataChannel) SetAgentVersion(agentVersion string) {
	_m.Called(agentVersion)
}

// SetSessionType provides a mock function with given fields: sessionType
func (_m *IDataChannel) SetSessionType(sessionType string) {
	_m.Called(sessionType)
}

// SetWebsocket provides a mock function with given fields: _a0, streamUrl, tokenValue
func (_m *IDataChannel) SetWebsocket(streamUrl string, tokenValue string) {
	_m.Called(streamUrl, tokenValue)
}

// SetWsChannel provides a mock function with given fields: wsChannel
func (_m *IDataChannel) SetWsChannel(wsChannel communicator.IWebSocketChannel) {
	_m.Called(wsChannel)
}
